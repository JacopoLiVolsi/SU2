digraph "CFreeFormDefBox::GetParametricCoord_Iterative"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node506 [label="CFreeFormDefBox::GetParametric\lCoord_Iterative",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node506 -> Node507 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node507 [label="CConfig::GetFFD_Tol",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_config.html#a77f7d4cc52fb43967f5ca2db2995c616",tooltip="Get the tolerance of the point inversion algorithm. "];
  Node506 -> Node508 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node508 [label="CConfig::GetnFFD_Iter",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_config.html#a67a2cdedbaa1d5227251de2b1af94fb5",tooltip="Get the number of iterations to evaluate the parametric coordinates. "];
  Node506 -> Node509 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node509 [label="CFreeFormDefBox::GetFFDGradient",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_free_form_def_box.html#a32ca026873144f96ae0e72b0350dfe18",tooltip="The routine computes the gradient of F(u, v, w) = ||X(u, v, w)-(x, y, z)||^2 evaluated at (u..."];
  Node509 -> Node510 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node510 [label="CFreeFormDefBox::GetDerivative2",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_free_form_def_box.html#addee5362fd8c8988fb919b1d80b2c5f9",tooltip="An auxiliary routine to help us compute the gradient of F(u, v, w) = ||X(u, v, w)-(x, y, z)||^2 = (Sum_ijk^lmn P1_ijk Bi Bj Bk -x)^2+(Sum_ijk^lmn P2_ijk Bi Bj Bk -y)^2+(Sum_ijk^lmn P3_ijk Bi Bj Bk -z)^2 Input: (u, v, w), dim , xyz=(x, y, z), l, m, n E.G.: dim=2 => we use the third coordinate of the control points, and the z-coordinate of xyz (0<=dim<=2) Output: 2* ( (Sum_{i, j, k}^l, m, n P_{ijk}[dim] B_i^l[u] B_j^m[v] B_k^n[w]) - xyz[dim]). "];
  Node510 -> Node511 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node511 [label="CFreeFormBlending::\lGetBasis",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_free_form_blending.html#ac31d71e2b7e31d7c9e377845be61b9c3",tooltip="A pure virtual member. "];
  Node509 -> Node512 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node512 [label="CFreeFormDefBox::GetDerivative3",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_free_form_def_box.html#a5961f75e1dcddea8f42cfd79f3ede13a",tooltip="An auxiliary routine to help us compute the gradient of F(u, v, w) = ||X(u, v, w)-(x, y, z)||^2 = (Sum_ijk^lmn P1_ijk Bi Bj Bk -x)^2+(Sum_ijk^lmn P2_ijk Bi Bj Bk -y)+(Sum_ijk^lmn P3_ijk Bi Bj Bk -z) "];
  Node512 -> Node513 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node513 [label="CFreeFormDefBox::GetDerivative1",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_free_form_def_box.html#aaef410c4157d3f039d097500364779c3",tooltip="An auxiliary routine to help us compute the gradient of F(u, v, w) = ||X(u, v, w)-(x, y, z)||^2 = (Sum_ijk^lmn P1_ijk Bi Bj Bk -x)^2+(Sum_ijk^lmn P2_ijk Bi Bj Bk -y)^2+(Sum_ijk^lmn P3_ijk Bi Bj Bk -z)^2 Input: val_t, val_diff (to identify the index of the Bernstein polynomail we differentiate), the i, j, k , l, m, n E.G.: val_diff=2 => we differentiate w.r.t. w (val_diff=0,1, or 2) Output: d [B_i^l*B_j^m *B_k^n] / d val_diff (val_u, val_v, val_w). "];
  Node513 -> Node514 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node514 [label="CFreeFormBlending::\lGetDerivative",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_free_form_blending.html#ae3882399de59f18384f128cf353def97",tooltip="A pure virtual member. "];
  Node513 -> Node511 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node506 -> Node515 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node515 [label="CFreeFormDefBox::GetFFDHessian",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_free_form_def_box.html#ae7e30b9f7e4e1d5683fc02c9097cb521",tooltip="The routine that computes the Hessian of F(u, v, w) = ||X(u, v, w)-(x, y, z)||^2 evaluated at (u..."];
  Node515 -> Node512 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node515 -> Node510 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node515 -> Node516 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node516 [label="CFreeFormDefBox::GetDerivative5",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_free_form_def_box.html#a74f3d04c16fcbb9ccb3eec420b606748",tooltip="An auxiliary routine to help us compute the Hessian of F(u, v, w) = ||X(u, v, w)-(x, y, z)||^2 = (Sum_ijk^lmn P1_ijk Bi Bj Bk -x)^2+(Sum_ijk^lmn P2_ijk Bi Bj Bk -y)+(Sum_ijk^lmn P3_ijk Bi Bj Bk -z) Input: (u, v, w), dim , diff_this, diff_this_also, xyz=(x, y, z), l, m, n Output: Sum_{i, j, k}^{l, m, n} [two of them with -1, depending on diff_this, diff_this_also=0,1 or 2] P_{ijk}[dim] * (B_i^l[u] B_j^m[v] B_k^n[w])â€“one of them diffrentiated; which? diff_thiss will tell us ; E.G.: dim=2, diff_this=1 => we use the third coordinate of the control points, and derivate de v-Bersntein polynomial (use m-1 when summing!!). "];
  Node516 -> Node517 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node517 [label="CFreeFormDefBox::GetDerivative4",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_free_form_def_box.html#a073ba60f268882fa2e5746b15080f2bb",tooltip="An auxiliary routine to help us compute the Hessian of F(u, v, w) = ||X(u, v, w)-(x, y, z)||^2 = (Sum_ijk^lmn P1_ijk Bi Bj Bk -x)^2+(Sum_ijk^lmn P2_ijk Bi Bj Bk -y)+(Sum_ijk^lmn P3_ijk Bi Bj Bk -z) Input: val_t, val_diff, val_diff2 (to identify the index of the Bernstein polynomials we differentiate), the i, j, k , l, m, n E.G.: val_diff=1, val_diff2=2 => we differentiate w.r.t. v and w (val_diff=0,1, or 2) E.G.: val_diff=0, val_diff2=0 => we differentiate w.r.t. u two times Output: [d [B_i^l*B_j^m *B_k^n]/d val_diff *d [B_i^l*B_j^m *B_k^n]/d val_diff2] (val_u, val_v, val_w) . "];
  Node517 -> Node514 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node517 -> Node511 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node506 -> Node518 [color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node518 [label="CConfig::GetFFD_Blending",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_config.html#a7440b66030cdeccae255d941534dffcc",tooltip="Get the kind of FFD Blending function. "];
}
