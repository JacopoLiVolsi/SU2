digraph "CFreeFormBlending::GetBasis"
{
  edge [fontname="Helvetica",fontsize="10",labelfontname="Helvetica",labelfontsize="10"];
  node [fontname="Helvetica",fontsize="10",shape=record];
  rankdir="LR";
  Node5 [label="CFreeFormBlending::\lGetBasis",height=0.2,width=0.4,color="black", fillcolor="grey75", style="filled", fontcolor="black"];
  Node5 -> Node6 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 [label="CFreeFormDefBox::EvalCartesian\lCoord",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_free_form_def_box.html#a1e4687107257a58ad8af6a461002b140",tooltip="Here we take the parametric coords of a point in the box and we convert them to the physical cartesia..."];
  Node6 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node7 [label="CSurfaceMovement::SetParametric\lCoord",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_surface_movement.html#aba4574819df11175b382e0e765ec2f92",tooltip="Compute the parametric coordinates of a grid point using a point inversion strategy in the free form ..."];
  Node7 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node8 [label="CSurfaceMovement::SetSurface\l_Deformation",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_surface_movement.html#a23bec9fbe1bcd7f6117100de93381ac3",tooltip="Set the surface/boundary deformation. "];
  Node8 -> Node9 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node9 [label="CSurfaceMovement::SetSurface\l_Derivative",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_surface_movement.html#af6aac73d04565bf6e9b81305b66e97e7",tooltip="Set derivatives of the surface/boundary deformation. "];
  Node9 -> Node10 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node10 [label="CDriver::DynamicMesh\l_Preprocessing",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_driver.html#af585d91d9c08dbddcc2b3e67dd5f5af9",tooltip="GridMovement_Preprocessing. "];
  Node10 -> Node11 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node11 [label="CDriver::CDriver",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_driver.html#a3fca4a013a6efa9bbb38fe78a86b5f3d",tooltip="Constructor of the class. "];
  Node8 -> Node12 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node12 [label="main",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$_s_u2___d_e_f_8cpp.html#a0ddf1224851353fc92bfbff6f499fa97"];
  Node8 -> Node13 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node13 [label="SetProjection_AD",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$_s_u2___d_o_t_8cpp.html#a3fceed882e8eb3d6796c8e8396af7d87",tooltip="Projection of the surface sensitivity using algorithmic differentiation (AD). "];
  Node13 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node14 [label="main",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$_s_u2___d_o_t_8cpp.html#a0ddf1224851353fc92bfbff6f499fa97"];
  Node6 -> Node15 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node15 [label="CSurfaceMovement::GetCartesian\lCoordCP",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_surface_movement.html#a0e78a05648d4f4c74e364f6615023cfa",tooltip="Get the cartes. "];
  Node15 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node16 [label="CSurfaceMovement::Update\lParametricCoord",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_surface_movement.html#a955774953bd11927bcfcaec014125126",tooltip="Update the parametric coordinates of a grid point using a point inversion strategy in the free form F..."];
  Node16 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node6 -> Node17 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 [label="CSurfaceMovement::SetCartesian\lCoord",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_surface_movement.html#a98df1fef0356600c1ab2df88dba24113",tooltip="Recompute the cartesian coordinates using the control points position. "];
  Node17 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 -> Node18 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node18 [label="CSurfaceMovement::SetBoundary\l_Flutter3D",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_surface_movement.html#adc0f0df29bc1f6c9dad2c37d202d7879",tooltip="Deforms a 3-D flutter/pitching surface during an unsteady simulation. "];
  Node17 -> Node19 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node19 [label="SetProjection_FD",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$_s_u2___d_o_t_8cpp.html#a5c5163a755085e03f1dfa23aeb7e21f2",tooltip="Projection of the surface sensitivity using finite differences (FD). "];
  Node19 -> Node14 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node17 -> Node20 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node20 [label="main",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$_s_u2___g_e_o_8cpp.html#a0ddf1224851353fc92bfbff6f499fa97"];
  Node6 -> Node21 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node21 [label="CFreeFormDefBox::SetSupport\lCPChange",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_free_form_def_box.html#abe734246d9e32e869eb322b04e676eb3",tooltip="Change the the position of the corners of the unitary FFDBox, and find the position of the control po..."];
  Node21 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 -> Node22 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node22 [label="CFreeFormDefBox::GetDerivative1",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_free_form_def_box.html#aaef410c4157d3f039d097500364779c3",tooltip="An auxiliary routine to help us compute the gradient of F(u, v, w) = ||X(u, v, w)-(x, y, z)||^2 = (Sum_ijk^lmn P1_ijk Bi Bj Bk -x)^2+(Sum_ijk^lmn P2_ijk Bi Bj Bk -y)^2+(Sum_ijk^lmn P3_ijk Bi Bj Bk -z)^2 Input: val_t, val_diff (to identify the index of the Bernstein polynomail we differentiate), the i, j, k , l, m, n E.G.: val_diff=2 => we differentiate w.r.t. w (val_diff=0,1, or 2) Output: d [B_i^l*B_j^m *B_k^n] / d val_diff (val_u, val_v, val_w). "];
  Node22 -> Node23 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 [label="CFreeFormDefBox::GetDerivative3",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_free_form_def_box.html#a5961f75e1dcddea8f42cfd79f3ede13a",tooltip="An auxiliary routine to help us compute the gradient of F(u, v, w) = ||X(u, v, w)-(x, y, z)||^2 = (Sum_ijk^lmn P1_ijk Bi Bj Bk -x)^2+(Sum_ijk^lmn P2_ijk Bi Bj Bk -y)+(Sum_ijk^lmn P3_ijk Bi Bj Bk -z) "];
  Node23 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node24 [label="CFreeFormDefBox::GetFFDGradient",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_free_form_def_box.html#a32ca026873144f96ae0e72b0350dfe18",tooltip="The routine computes the gradient of F(u, v, w) = ||X(u, v, w)-(x, y, z)||^2 evaluated at (u..."];
  Node24 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node25 [label="CFreeFormDefBox::GetParametric\lCoord_Iterative",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_free_form_def_box.html#a011c6d7a5d805990775f0ee28d827a7f",tooltip="Iterative strategy for computing the parametric coordinates. "];
  Node25 -> Node7 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node25 -> Node26 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node26 [label="CSurfaceMovement::SetParametric\lCoordCP",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_surface_movement.html#aa2807f008a1580a5eafd712a7051b548",tooltip="Set the Parametric coordinates. "];
  Node26 -> Node8 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node25 -> Node16 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node23 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node27 [label="CFreeFormDefBox::GetFFDHessian",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_free_form_def_box.html#ae7e30b9f7e4e1d5683fc02c9097cb521",tooltip="The routine that computes the Hessian of F(u, v, w) = ||X(u, v, w)-(x, y, z)||^2 evaluated at (u..."];
  Node27 -> Node25 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 -> Node28 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 [label="CFreeFormDefBox::GetDerivative2",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_free_form_def_box.html#addee5362fd8c8988fb919b1d80b2c5f9",tooltip="An auxiliary routine to help us compute the gradient of F(u, v, w) = ||X(u, v, w)-(x, y, z)||^2 = (Sum_ijk^lmn P1_ijk Bi Bj Bk -x)^2+(Sum_ijk^lmn P2_ijk Bi Bj Bk -y)^2+(Sum_ijk^lmn P3_ijk Bi Bj Bk -z)^2 Input: (u, v, w), dim , xyz=(x, y, z), l, m, n E.G.: dim=2 => we use the third coordinate of the control points, and the z-coordinate of xyz (0<=dim<=2) Output: 2* ( (Sum_{i, j, k}^l, m, n P_{ijk}[dim] B_i^l[u] B_j^m[v] B_k^n[w]) - xyz[dim]). "];
  Node28 -> Node24 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node28 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node5 -> Node29 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node29 [label="CFreeFormDefBox::GetDerivative4",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_free_form_def_box.html#a073ba60f268882fa2e5746b15080f2bb",tooltip="An auxiliary routine to help us compute the Hessian of F(u, v, w) = ||X(u, v, w)-(x, y, z)||^2 = (Sum_ijk^lmn P1_ijk Bi Bj Bk -x)^2+(Sum_ijk^lmn P2_ijk Bi Bj Bk -y)+(Sum_ijk^lmn P3_ijk Bi Bj Bk -z) Input: val_t, val_diff, val_diff2 (to identify the index of the Bernstein polynomials we differentiate), the i, j, k , l, m, n E.G.: val_diff=1, val_diff2=2 => we differentiate w.r.t. v and w (val_diff=0,1, or 2) E.G.: val_diff=0, val_diff2=0 => we differentiate w.r.t. u two times Output: [d [B_i^l*B_j^m *B_k^n]/d val_diff *d [B_i^l*B_j^m *B_k^n]/d val_diff2] (val_u, val_v, val_w) . "];
  Node29 -> Node30 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
  Node30 [label="CFreeFormDefBox::GetDerivative5",height=0.2,width=0.4,color="black", fillcolor="white", style="filled",URL="$class_c_free_form_def_box.html#a74f3d04c16fcbb9ccb3eec420b606748",tooltip="An auxiliary routine to help us compute the Hessian of F(u, v, w) = ||X(u, v, w)-(x, y, z)||^2 = (Sum_ijk^lmn P1_ijk Bi Bj Bk -x)^2+(Sum_ijk^lmn P2_ijk Bi Bj Bk -y)+(Sum_ijk^lmn P3_ijk Bi Bj Bk -z) Input: (u, v, w), dim , diff_this, diff_this_also, xyz=(x, y, z), l, m, n Output: Sum_{i, j, k}^{l, m, n} [two of them with -1, depending on diff_this, diff_this_also=0,1 or 2] P_{ijk}[dim] * (B_i^l[u] B_j^m[v] B_k^n[w])–one of them diffrentiated; which? diff_thiss will tell us ; E.G.: dim=2, diff_this=1 => we use the third coordinate of the control points, and derivate de v-Bersntein polynomial (use m-1 when summing!!). "];
  Node30 -> Node27 [dir="back",color="midnightblue",fontsize="10",style="solid",fontname="Helvetica"];
}
